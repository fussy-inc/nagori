input AnswerInput {
  answerTypeEnum: AnswerTypeEnum!
  locationAnswer: LocationAnswerInput
  numberAnswer: NumberAnswerInput
  questionId: Int!
  referenceAnswer: ReferenceAnswerInput
  textAnswer: TextAnswerInput
}

enum AnswerTypeEnum {
  """
  Image URL
  """
  image_url

  """
  Location
  """
  location

  """
  Number
  """
  number

  """
  Reference
  """
  reference

  """
  Text
  """
  text

  """
  URL
  """
  url
}

"""
Union of answer types
"""
union AnswerUnion = LocationAnswer | NumberAnswer | ReferenceAnswer | TextAnswer

type Category {
  createdAt: ISO8601DateTime!
  furigana: String!
  id: Int!
  imageUrl: String
  name: String!
  updatedAt: ISO8601DateTime!
}

enum CategoryColumnEnum {
  """
  created_at
  """
  CREATED_AT

  """
  furigana
  """
  FURIGANA

  """
  id
  """
  ID

  """
  name
  """
  NAME
}

"""
Autogenerated input type of CreateForm
"""
input CreateFormInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form: FormInput!
}

"""
Autogenerated return type of CreateForm.
"""
type CreateFormPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  form: Form
}

"""
Autogenerated input type of CreateResponse
"""
input CreateResponseInput {
  answers: [AnswerInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  formId: Int!
}

"""
Autogenerated return type of CreateResponse.
"""
type CreateResponsePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  response: Response
}

type Form {
  categories: [Category!]!
  createdAt: ISO8601DateTime!
  description: String!
  id: Int!
  questions: [Question!]!
  title: String!
  updatedAt: ISO8601DateTime!
  user: User!
  userId: Int!
}

input FormInput {
  categoryIds: [Int!]!
  description: String!
  questions: [QuestionInput!]!
  title: String!
}

type GeoLocation {
  latitude: Float!
  longitude: Float!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Autogenerated input type of IssueFussyAccessToken
"""
input IssueFussyAccessTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sessionId: String!
}

"""
Autogenerated return type of IssueFussyAccessToken.
"""
type IssueFussyAccessTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type LocationAnswer {
  createdAt: ISO8601DateTime!
  id: Int!
  position: Int!
  question: Question!
  questionId: Int!
  response: Response!
  responseId: Int!
  updatedAt: ISO8601DateTime!
  value: GeoLocation!
}

input LocationAnswerInput {
  latitude: Float!
  longitude: Float!
}

input LocationNearInput {
  """
  the unit is `meter`
  """
  distance: Float!
  latitude: Float!
  longitude: Float!
}

type Mutation {
  createForm(
    """
    Parameters for CreateForm
    """
    input: CreateFormInput!
  ): CreateFormPayload
  createResponse(
    """
    Parameters for CreateResponse
    """
    input: CreateResponseInput!
  ): CreateResponsePayload

  """
  you can get access token at once
  """
  issueFussyAccessToken(
    """
    Parameters for IssueFussyAccessToken
    """
    input: IssueFussyAccessTokenInput!
  ): IssueFussyAccessTokenPayload
}

type NumberAnswer {
  createdAt: ISO8601DateTime!
  id: Int!
  position: Int!
  question: Question!
  questionId: Int!
  response: Response!
  responseId: Int!
  updatedAt: ISO8601DateTime!
  value: Int!
}

input NumberAnswerInput {
  value: Int!
}

enum OrderEnum {
  """
  Ascending order
  """
  asc

  """
  Descending order
  """
  desc
}

type Query {
  categories(
    column: CategoryColumnEnum
    ids: [Int!]
    limit: Int
    order: OrderEnum
  ): [Category!]!
  form(id: Int!): Form!
  forms(
    """
    filter by category ids
    """
    categoryIds: [Int!]
    ids: [Int!]

    """
    filter by location nearby
    """
    locationNearby: LocationNearInput
  ): [Form!]!

  """
  current user's data. need access token
  """
  me: User!
  response(id: Int!): Response!
  responses(
    """
    filter by category ids
    """
    categoryIds: [Int!]
    ids: [Int!]

    """
    filter by location nearby
    """
    locationNearby: LocationNearInput
  ): [Response!]!

  """
  find a user by access token
  """
  userByAccessToken(accessToken: String!): User
}

type Question {
  answerType: String!
  content: String!
  createdAt: ISO8601DateTime!
  form: Form!
  formId: Int!
  id: Int!
  position: Int!
  updatedAt: ISO8601DateTime!
}

input QuestionInput {
  answerTypeEnum: AnswerTypeEnum!
  content: String!
  position: Int!
}

type ReferenceAnswer {
  createdAt: ISO8601DateTime!
  id: Int!
  position: Int!
  updatedAt: ISO8601DateTime!

  """
  referenced response id
  """
  value: Int!
}

input ReferenceAnswerInput {
  value: Int!
}

type Response {
  answers: [AnswerUnion!]!
  form: Form!
  formId: Int!
  id: Int!
  user: User!
  userId: Int!
}

type TextAnswer {
  id: Int!
  position: Int!
  question: Question!
  questionId: Int!
  response: Response!
  responseId: Int!
  value: String!
}

input TextAnswerInput {
  value: String!
}

type User {
  bio: String
  createdAt: ISO8601DateTime!
  id: Int!
  name: String!
  updatedAt: ISO8601DateTime!
}
